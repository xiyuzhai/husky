[workspace]
members = [
    "crates/abstractions/*",
    "crates/apps/*",
    "crates/archs/*",
    "crates/benchmarks/*",
    "crates/comptime/*",
    "crates/corgi/*",
    "crates/cybertron/*",
    "crates/devtime/*",
    "crates/gadgets/*",
    "crates/fs/*",
    "crates/gui/*",
    "crates/ide/*",
    "crates/isabelle/*",
    "crates/kernel/*",
    "crates/ki/*",
    "crates/latex/*",
    "crates/lex/*",
    "crates/lean/*",
    "crates/linket/*",
    "crates/linktime/*",
    "crates/lisp/*",
    "crates/mayuri/*",
    "crates/mir/*",
    "crates/mizar/*",
    "crates/namekian/*",
    "crates/protocols/*",
    "crates/prototypes/*",
    "crates/runtime/*",
    "crates/rocq/*",
    "crates/semantics/*",
    "crates/syntax/*",
    "crates/devsoul/*",
    "crates/utils/*",
    "crates/value/*",
    "crates/visored/*",
    "crates/vm/*",
    "crates/vmir/*",
    "library/core",
    "registry/*",
    "playground/learn-rusqlite",
    "playground/egui/*",
    "playground/try-py-ffi-in-rs",
]
resolver = "2"

[workspace.package]
version = "0.1.0"
rust-version = "1.77.0"
authors = ["Xiyu Zhai"]
edition = "2021"
homepage = "todo"
repository = "https://github.com/xiyuzhai-husky-lang/husky"
readme = "README.md"
license = "MIT"
categories = ["compilers"]
keywords = ["husky"]

[workspace.lints.clippy]
uninlined_format_args = "warn"
blocks_in_if_conditions = "allow"

[profile.dev]
opt-level = 1
panic = "unwind"

[profile.test]
opt-level = 0

[profile.release]
opt-level = 3
lto = false

[workspace.dependencies]
arc-swap = "1.4.0"
arrayvec = { version = "0.7", default-features = false }
atomic_enum = "0.3.0"
axum = { version = "0.7.4" }
bit-set = "0.8.0"
bitflags = "2.6.0"
bounded-vec = "0.7.1"
cargo = "0.81.0"
cargo-manifest = "0.15.1"
chinese-number = { version = "0.7.2", default-features = false, features = [
    "number-to-chinese"
] }
chrono = { version = "0.4.24", default-features = false, features = [
    "clock",
    "std"
] }
ciborium = "0.2.1"
clap = { version = "4.5.16", features = ["derive", "env"] }
clap_complete = "4.2.1"
clap_mangen = "0.2.10"
codespan-reporting = "0.11.1"
convert_case = "0.6.0"
colored = "2.0.0"
crossbeam = "0.8.1"
crossbeam-channel = "0.5.0"
crossbeam-utils = { version = "0.8", default-features = false }
crypto-common = "0.1.6"
csv = "1"
dashmap = "6.0.1"
dirs = "5.0.1"
ecolor = { git = "https://github.com/xiyuzhai-husky-lang/egui.git", features = [
    "serde",
    "bytemuck"
] }
ecow = { version = "0.2", features = ["serde"] }
eframe = { git = "https://github.com/xiyuzhai-husky-lang/egui.git" }
egui = { git = "https://github.com/xiyuzhai-husky-lang/egui.git", features = [
    "callstack",
] }
either = "1.13.0"
elsa = "=1.10.0"
ena = "0.14.2"
env_logger = "0.10"
env_proxy = "0.4"
epaint = { git = "https://github.com/xiyuzhai-husky-lang/egui.git" }
expect-test = "1.5.0"
futures = "0.3.28"
futures-util = { version = "0.3", default-features = false, features = [
    "sink",
    "std"
] }
fxhash = "0.2.1"
git2 = "0.18.3"
hashlink = "0.9.1"
heck = "0.5"
hex = "0.4.3"
hex-literal = "0.4.1"
image = "0.25.0"
imageproc = "0.25.0"
indexmap = "2.4.0"
itertools = "0.13.0"
jobserver_crate = { version = "0.1.32", package = "jobserver" }
lazy_static = "1.5.0"
libc = "0.2"
libloading = "0.8.5"
log = "0.4.22"
lsp-server = "=0.7.0"
lsp-types = { version = "=0.95.0", features = ["proposed"] }
measureme = "12"
makefile-lossless = "0.1.5"
ndarray = "0.15.6"
ndarray-stats = "0.5.1"
once_cell = "1.19.0"
ordered-float = { version = "4.2.2", features = ["serde"] }
parking_lot = "0.12.1"
paste = "1.0.6"
pathdiff = "0.2.1"
proc-macro2 = "1.0.86"
ptree = "0.5.0"
pyo3 = "0.22.3"
quote = "1.0.37"
rand = "0.8.4"
rand_chacha = "0.3.1"
relative-path = "1.7.2"
rfd = "0.15"
rmp-serde = "1.3.0"
rowan = "0.15.16"
# `bundled` causes us to automatically compile and link in an up to date
# version of SQLite for you. This avoids many common build issues, and
# avoids depending on the version of SQLite on the users system (or your
# system), which may be old or missing. It's the right choice for most
# programs that control their own SQLite databases.
#
# That said, it's not ideal for all scenarios and in particular, generic
# libraries built around `rusqlite` should probably not enable it, which
# is why it is not a default feature -- it could become hard to disable.
rusqlite = { version = "0.31.0", features = ["bundled"] }
rust-optimal-transport = { version = "0.2", features = ["blas"] }
rustc_apfloat = "0.2.0"
rustc-hash = "2.0.0"
rustc-rayon = { version = "0.5.0" }
rustc-rayon-core = { version = "0.5.0" }
rustc_version = "0.4"
sealed = "0.5"
serde = { version = "1.0.209", features = ["derive"] }
serde_json = { version = "1.0.127", features = ["preserve_order"] }
serde_yaml = { version = "0.9.0" }
serde_with = "3.9.0"
sha2 = "0.10.8"
similar = "2.6.0"
# turn on "union" to guarantee the size of SmallVec is unaffected by dependencies
smallvec = { version = "1.12", features = [
    "union",
    "serde",
    "const_generics",
    "may_dangle"
] }
stacker = "0.1.16"
syn = { version = "2.0.76", features = ["full", "extra-traits", "visit-mut"] }
tempfile = "3.12"
thin-vec = "0.2.12"
thiserror = "1.0.63"
threadpool = "1.7.1"
tokio = { version = "1.39.3", features = ["full"] }
tokio-stream = { version = "0.1.9" }
tokio-tungstenite = { version = "0.23.1" }
toml = "0.8.19"
toml_edit = "0.22.20"
tower = { version = "0.5.0", features = ["util"] }
tower-http = { version = "0.5.1", features = ["fs", "trace"] }
tracing = "0.1.40"
tracing-subscriber = { version = "0.3", features = ["env-filter"] }
tracing-test = "0.2.5"
unindent = "0.2.3"
walkdir = "2.5.0"
winapi = "0.3.9"
xxhash-rust = { version = "0.8.5" }
yaml-rust2 = "0.9.0"
# abstractions
alt-option = { path = "crates/abstractions/alt-option" }
composite-pattern = { path = "crates/abstractions/composite-pattern" }
coword = { path = "crates/abstractions/coword" }
enum-class = { path = "crates/abstractions/enum-class" }
enum-class-macros = { path = "crates/abstractions/enum-class-macros" }
enum-index = { path = "crates/abstractions/enum-index" }
enum-index-macros = { path = "crates/abstractions/enum-index-macros" }
from-str-pos = { path = "crates/abstractions/from-str-pos" }
graph-dynamics = { path = "crates/abstractions/graph-dynamics" }
idx = { path = "crates/abstractions/idx" }
idx-arena = { path = "crates/abstractions/idx-arena" }
interned = { path = "crates/abstractions/interned" }
interned-macros = { path = "crates/abstractions/interned-macros" }
is = { path = "crates/abstractions/is" }
maybe-result = { path = "crates/abstractions/maybe-result" }
original-error = { path = "crates/abstractions/original-error" }
parsec = { path = "crates/abstractions/parsec" }
propagate = { path = "crates/abstractions/propagate" }
rustc_arena = { path = "crates/abstractions/rustc_arena" }
rustc_data_structures = { path = "crates/abstractions/rustc_data_structures" }
rustc_fluent_macros = { path = "crates/abstractions/rustc_fluent_macros" }
rustc_index = { path = "crates/abstractions/rustc_index" }
rustc_index_macros = { path = "crates/abstractions/rustc_index_macros" }
rustc_macros = { path = "crates/abstractions/rustc_macros" }
rustc-pattern-analysis = { path = "crates/abstractions/rustc-pattern-analysis" }
rustc_serialize = { path = "crates/abstractions/rustc_serialize" }
rustc_graphviz = { path = "crates/abstractions/rustc_graphviz" }
ref-index = { path = "crates/abstractions/ref-index" }
salsa = { path = "crates/abstractions/salsa" }
salsa-macros = { path = "crates/abstractions/salsa-macros" }
serde-impl = { path = "crates/abstractions/serde-impl" }
shifted-unsigned-int = { path = "crates/abstractions/shifted-unsigned-int" }
snapshot = { path = "crates/abstractions/snapshot" }
svtable = { path = "crates/abstractions/svtable" }
time-capsule = { path = "crates/abstractions/time-capsule" }
ui = { path = "crates/abstractions/ui" }
ui-macros = { path = "crates/abstractions/ui-macros" }
vec-like = { path = "crates/abstractions/vec-like" }
version-stamp = { path = "crates/abstractions/version-stamp" }
with-db = { path = "crates/abstractions/with-db" }
# comptime
husky-dev-comptime = { path = "crates/comptime/husky-dev-comptime" }
husky-rust-transpilation = { path = "crates/comptime/husky-rust-transpilation" }
# cybertron
cybertron = { path = "crates/cybertron/cybertron" }
cybertron-macros = { path = "crates/cybertron/cybertron-macros" }
# devsoul
husky-devsoul = { path = "crates/devsoul/husky-devsoul" }
husky-standard-devsoul = { path = "crates/devsoul/husky-standard-devsoul" }
# devtime
husky-devtime = { path = "crates/devtime/husky-devtime" }
husky-session = { path = "crates/devtime/husky-session" }
husky-trace = { path = "crates/devtime/husky-trace" }
# fs
husky-corgi-config = { path = "crates/fs/husky-corgi-config" }
husky-manifest = { path = "crates/fs/husky-manifest" }
husky-toolchain-config = { path = "crates/fs/husky-toolchain-config" }
husky-vfs = { path = "crates/fs/husky-vfs" }
# gui
egui_dock = { path = "crates/gui/egui-dock" }
husky-code-editor = { path = "crates/gui/husky-code-editor" }
husky-color = { path = "crates/gui/husky-color" }
husky-gui = { path = "crates/gui/husky-gui" }
husky-trace-doc = { path = "crates/gui/husky-trace-doc" }
# hir
husky-hir-decl = { path = "crates/hir/husky-hir-decl" }
husky-hir-defn = { path = "crates/hir/husky-hir-defn" }
husky-hir-eager-expr = { path = "crates/hir/husky-hir-eager-expr" }
husky-hir-expr = { path = "crates/hir/husky-hir-expr" }
husky-hir-lazy-expr = { path = "crates/hir/husky-hir-lazy-expr" }
husky-hir-opr = { path = "crates/hir/husky-hir-opr" }
husky-hir-prelude = { path = "crates/hir/husky-hir-prelude" }
husky-hir-ty = { path = "crates/hir/husky-hir-ty" }
# ide
husky-code-lens = { path = "crates/ide/husky-code-lens" }
husky-diagnostics = { path = "crates/ide/husky-diagnostics" }
husky-hover = { path = "crates/ide/husky-hover" }
husky-folding-range = { path = "crates/ide/husky-folding-range" }
husky-ide-fmt = { path = "crates/ide/husky-ide-fmt" }
husky-inlay-hints = { path = "crates/ide/husky-inlay-hints" }
husky-semantic-token = { path = "crates/ide/husky-semantic-token" }
husky-token-info = { path = "crates/ide/husky-token-info" }
rustc_span = { path = "crates/ide/rustc_span" }
# isabelle
isabelle-ast = { path = "crates/isabelle/isabelle-ast" }
isabelle-sem-expr = { path = "crates/isabelle/isabelle-sem-expr" }
isabelle-hir-expr = { path = "crates/isabelle/isabelle-hir-expr" }
isabelle-token = { path = "crates/isabelle/isabelle-token" }
# kernel
husky-coword = { path = "crates/kernel/husky-coword" }
husky-dec-term = { path = "crates/kernel/husky-dec-term" }
husky-dec-ty = { path = "crates/kernel/husky-dec-ty" }
husky-dec-signature = { path = "crates/kernel/husky-dec-signature" }
husky-entity-kind = { path = "crates/kernel/husky-entity-kind" }
husky-entity-path = { path = "crates/kernel/husky-entity-path" }
husky-eth-term = { path = "crates/kernel/husky-eth-term" }
husky-eth-signature = { path = "crates/kernel/husky-eth-signature" }
husky-expr = { path = "crates/kernel/husky-expr" }
husky-item-path-interface = { path = "crates/kernel/husky-item-path-interface" }
husky-fly-term = { path = "crates/kernel/husky-fly-term" }
husky-opr = { path = "crates/kernel/husky-opr" }
husky-scope = { path = "crates/kernel/husky-scope" }
husky-place = { path = "crates/kernel/husky-place" }
husky-term-prelude = { path = "crates/kernel/husky-term-prelude" }
# ki
husky-ki = { path = "crates/ki/husky-ki" }
husky-ki-repr = { path = "crates/ki/husky-ki-repr" }
husky-ki-repr-interface = { path = "crates/ki/husky-ki-repr-interface" }
# latex
latex-ast = { path = "crates/latex/latex-ast" }
latex-command = { path = "crates/latex/latex-command" }
latex-environment = { path = "crates/latex/latex-environment" }
latex-math-letter = { path = "crates/latex/latex-math-letter" }
latex-math-punctuation = { path = "crates/latex/latex-math-punctuation" }
latex-rose-punctuation = { path = "crates/latex/latex-rose-punctuation" }
latex-prelude = { path = "crates/latex/latex-prelude" }
latex-sem-expr = { path = "crates/latex/latex-sem-expr" }
latex-text = { path = "crates/latex/latex-text" }
latex-token = { path = "crates/latex/latex-token" }
latex-vfs = { path = "crates/latex/latex-vfs" }
# lean
lean-ast = { path = "crates/lean/lean-ast" }
lean-coword = { path = "crates/lean/lean-coword" }
lean-mir-expr = { path = "crates/lean/lean-mir-expr" }
lean-hir-decl = { path = "crates/lean/lean-hir-decl" }
lean-hir-defn = { path = "crates/lean/lean-hir-defn" }
lean-entity-path = { path = "crates/lean/lean-entity-path" }
lean-opr = { path = "crates/lean/lean-opr" }
lean-sem-expr = { path = "crates/lean/lean-sem-expr" }
lean-syn-expr = { path = "crates/lean/lean-syn-expr" }
lean-term = { path = "crates/lean/lean-term" }
lean-token = { path = "crates/lean/lean-token" }
# lex
husky-regional-token = { path = "crates/lex/husky-regional-token" }
husky-token-data = { path = "crates/lex/husky-token-data" }
husky-token = { path = "crates/lex/husky-token" }
husky-text = { path = "crates/lex/husky-text" }
# linket
husky-javelin = { path = "crates/linket/husky-javelin" }
husky-linket = { path = "crates/linket/husky-linket" }
husky-linket-impl = { path = "crates/linket/husky-linket-impl" }
husky-any-linket-impls = { path = "crates/linket/husky-any-linket-impls" }
husky-standard-linket-impl = { path = "crates/linket/husky-standard-linket-impl" }
husky-standard-linket-impl-macros = { path = "crates/linket/husky-standard-linket-impl-macros" }
husky-virtual-linket-impl = { path = "crates/linket/husky-virtual-linket-impl" }
# linktime
husky-linktime = { path = "crates/linktime/husky-linktime" }
husky-boot-linktime = { path = "crates/linktime/husky-boot-linktime" }
husky-mono-linktime = { path = "crates/linktime/husky-mono-linktime" }
husky-virtual-linktime = { path = "crates/linktime/husky-virtual-linktime" }
# lisp
lisp-csv = { path = "crates/lisp/lisp-csv" }
# protocols
husky-ad-hoc-protocol = { path = "crates/protocols/husky-ad-hoc-protocol" }
husky-entity-protocol = { path = "crates/protocols/husky-entity-protocol" }
husky-figure-zone-protocol = { path = "crates/protocols/husky-figure-zone-protocol" }
husky-text-protocol = { path = "crates/protocols/husky-text-protocol" }
husky-token-protocol = { path = "crates/protocols/husky-token-protocol" }
husky-trace-protocol = { path = "crates/protocols/husky-trace-protocol" }
husky-standard-trace-protocol = { path = "crates/protocols/husky-standard-trace-protocol" }
husky-value-protocol = { path = "crates/protocols/husky-value-protocol" }
husky-visual-protocol = { path = "crates/protocols/husky-visual-protocol" }
# runtime
husky-dev-runtime = { path = "crates/runtime/husky-dev-runtime" }
# semantics
husky-sem-expr = { path = "crates/semantics/husky-sem-expr" }
husky-sem-opr = { path = "crates/semantics/husky-sem-opr" }
husky-sem-place-contract = { path = "crates/semantics/husky-sem-place-contract" }
husky-sem-item-path-deps = { path = "crates/semantics/husky-sem-item-path-deps" }
husky-sem-static-mut-deps = { path = "crates/semantics/husky-sem-static-mut-deps" }
husky-sem-var-deps = { path = "crates/semantics/husky-sem-var-deps" }
# syntax
husky-ast = { path = "crates/syntax/husky-ast" }
husky-crate-decl-ast = { path = "crates/syntax/husky-crate-decl-ast" }
husky-item-decl-ast = { path = "crates/syntax/husky-item-decl-ast" }
husky-item-defn-ast = { path = "crates/syntax/husky-item-defn-ast" }
husky-scope-expr = { path = "crates/syntax/husky-scope-expr" }
husky-syn-expr = { path = "crates/syntax/husky-syn-expr" }
husky-syn-decl = { path = "crates/syntax/husky-syn-decl" }
husky-syn-defn = { path = "crates/syntax/husky-syn-defn" }
husky-syn-opr = { path = "crates/syntax/husky-syn-opr" }
husky-entity-tree = { path = "crates/syntax/husky-entity-tree" }
# toml
husky-corgi-config-ast = { path = "crates/toml/husky-corgi-config-ast" }
husky-manifest-ast = { path = "crates/toml/husky-manifest-ast" }
husky-toml-ast = { path = "crates/toml/husky-toml-ast" }
husky-toml-token = { path = "crates/toml/husky-toml-token" }
husky-toolchain-config-ast = { path = "crates/toml/husky-toolchain-config-ast" }
# utils
husky-adversarial-utils = { path = "crates/utils/husky-adversarial-utils" }
husky-cargo-utils = { path = "crates/utils/husky-cargo-utils" }
husky-check-utils = { path = "crates/utils/husky-check-utils" }
husky-cli-utils = { path = "crates/utils/husky-cli-utils" }
husky-control-flow-utils = { path = "crates/utils/husky-control-flow-utils" }
husky-config-utils = { path = "crates/utils/husky-config-utils" }
husky-debug-utils = { path = "crates/utils/husky-debug-utils" }
husky-decl-macro-utils = { path = "crates/utils/husky-decl-macro-utils" }
husky-error-utils = { path = "crates/utils/husky-error-utils" }
husky-fmt-utils = { path = "crates/utils/husky-fmt-utils" }
husky-git-utils = { path = "crates/utils/husky-git-utils" }
husky-io-utils = { path = "crates/utils/husky-io-utils" }
husky-iter-utils = { path = "crates/utils/husky-iter-utils" }
husky-lifetime-utils = { path = "crates/utils/husky-lifetime-utils" }
husky-make-utils = { path = "crates/utils/husky-make-utils" }
husky-minimal-toml-utils = { path = "crates/utils/husky-minimal-toml-utils" }
husky-proc-macro-utils = { path = "crates/utils/husky-proc-macro-utils" }
husky-path-utils = { path = "crates/utils/husky-path-utils" }
husky-print-utils = { path = "crates/utils/husky-print-utils" }
husky-profile-utils = { path = "crates/utils/husky-profile-utils" }
husky-salsa-log-utils = { path = "crates/utils/husky-salsa-log-utils" }
husky-screen-utils = { path = "crates/utils/husky-screen-utils" }
husky-sha-utils = { path = "crates/utils/husky-sha-utils" }
husky-sync-utils = { path = "crates/utils/husky-sync-utils" }
husky-toml-utils = { path = "crates/utils/husky-toml-utils" }
husky-tree-utils = { path = "crates/utils/husky-tree-utils" }
husky-rng-utils = { path = "crates/utils/husky-rng-utils" }
husky-unicode-symbols = { path = "crates/utils/husky-unicode-symbols" }
husky-wild-utils = { path = "crates/utils/husky-wild-utils" }
husky-yaml-utils = { path = "crates/utils/husky-yaml-utils" }
# value
husky-value = { path = "crates/value/husky-value" }
husky-value-macros = { path = "crates/value/husky-value-macros" }
husky-literal-value = { path = "crates/value/husky-literal-value" }
husky-standard-value = { path = "crates/value/husky-standard-value" }
husky-standard-value-macros = { path = "crates/value/husky-standard-value-macros" }
husky-virtual-value = { path = "crates/value/husky-virtual-value" }
# visored
visored-annotation = { path = "crates/visored/visored-annotation" }
visored-coword = { path = "crates/visored/visored-coword" }
visored-mir-expr = { path = "crates/visored/visored-mir-expr" }
visored-isabelle-hol-transpilation = { path = "crates/visored/visored-isabelle-hol-transpilation" }
visored-entity-path = { path = "crates/visored/visored-entity-path" }
visored-lean-transpilation = { path = "crates/visored/visored-lean-transpilation" }
visored-global-resolution = { path = "crates/visored/visored-global-resolution" }
visored-global-dispatch = { path = "crates/visored/visored-global-dispatch" }
visored-prelude = { path = "crates/visored/visored-prelude" }
visored-sem-expr = { path = "crates/visored/visored-sem-expr" }
visored-signature = { path = "crates/visored/visored-signature" }
visored-syn-expr = { path = "crates/visored/visored-syn-expr" }
visored-opr = { path = "crates/visored/visored-opr" }
visored-term = { path = "crates/visored/visored-term" }
# vm
husky-vm = { path = "crates/vm/husky-vm" }
# vmir
husky-vmir = { path = "crates/vmir/husky-vmir" }
# library
husky-core = { path = "library/core" }
# registry
ad-hoc-devsoul-dependency = { path = "registry/ad-hoc-devsoul-dependency" }
cybertron-mini-lean-tokens = { path = "examples/cybertron-mini-lean-tokens-0.1.0" }
malamute = { path = "registry/malamute-0.1.0" }
ml-task = { path = "registry/ml-task-0.1.0" }
standard-devsoul = { path = "registry/standard-devsoul-0.1.0" }
